//def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"
def version, mvnCmd = "mvn -f app/pom.xml"

pipeline {
  agent {
    label 'maven'
  }
  stages { 
    stage('Build and Unit Test Stage') {
      steps {
        sh "${mvnCmd} install test"
        step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
      }
    }
    stage('Create Build Config Stage') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject() {
              return !openshift.selector("bc", "${APP_NAME}").exists();
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            echo "Creating Build Configuration ..."
            openshift.withProject(env.PROJECT) {
              openshift.newBuild("--name=${APP_NAME}", "--strategy=docker", "--context-dir=app", "--binary=true")
            }
            echo "Done creating Build Configuration. "
          }
        }
      }
    }
    stage('Containerize Stage') {
      steps {        
        script {
          openshift.withCluster() {
            echo "Starting build ..."
            openshift.withProject(env.PROJECT) {
              openshift.selector("bc", "${APP_NAME}").startBuild("--from-dir=app", "--wait=true")
            }
            echo "Done with build"
          }
        }
      }
    }
   stage('Create Deployment Descriptor Stage') {
     when {
       expression {
         openshift.withCluster() {
           openshift.withProject(env.PROJECT) {
             return !openshift.selector('dc', '${APP_NAME}').exists()
           }
         }
       }
     }
     steps {
       script {
         openshift.withCluster() {
           openshift.withProject(env.PROJECT) {
             def app = openshift.newApp("${APP_NAME}:latest")
             app.narrow("svc").expose();

             def dc = openshift.selector("dc", "${APP_NAME}")
             def dcmap = dc.object()
             dcmap.spec.replicas = 2
             openshift.apply(dcmap)
             while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                 sleep 10
             }
             openshift.set("triggers", "dc/${APP_NAME}", "--manual")
           }
         }
       }
     }
   }
   stage('Deploy Stage') {
     steps {
       script {
         openshift.withCluster() {
           openshift.withProject(env.PROJECT) {
             openshift.selector("dc", "${APP_NAME}").rollout().latest();
           }
         }
       }
     }
   }
  }
}
